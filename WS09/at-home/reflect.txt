// Name:							Pedro Zelada Souza
// Seneca Student ID:				116427188
// Seneca email:					pzelada-souza@myseneca.ca
// Date of completion:			    26-11-2019
//
// I confirm that the content of this file is created by me,
// with the exception of the parts provided to me by my professor.



- Learning Outcome:

On this workshop, I learned about multi threading and asynchronous execution, which are the division 
of the work load in a program in separate, concurrent threads to be executed in the CPU. This means 
that a task can be split in smaller parts and be executed at the same time at run time or that 
multiple individual tasks can be executed at the same time. This speeds up processing and reduces 
response and idle time.

The use of binary files in this workshop was essential because it makes it easier to manipulate large
amounts of data without the need to worry with character conversion or extraction. I achieved the use 
of binary files by using the fstream object and passing the std::ios::binary mode when opening the file.

I used 'fstream fs(file, std::ios::out|std::ios::binary);' to write to the file as binary.
I used 'fstream fs(file, std::ios::in|std::ios::binary);' to read from a binary file.

Binding a function to its arguments reduces code repetition and is useful when a function is being used 
repeated times without changes in the parameters. This is usually used when multi threading a function 
or when a function needs to be called from time to time, like a scheduled routine. In this workshop, 
binding a function was useful because it makes the creation of threads simpler and less work intensive.

Multi threading has the advantage of reducing response time when performing a task (or process), by having 
said process being split into different threads running at the same time. This ensures that labor intensive 
tasks, like loops and iterations, can be sped up greatly.

- Quiz 09 Reflection:

Question 1 -
    #define AA(X) replace(X)

Question 2 - 
    We have to wrap all placeholders in the replacements with brackets. 

Question 3 -
    _FILE_

Question 4 - 
    #ifdef DEBUG_
        // statements
    #endif // DEBUG_
    
Question 5 - 
    #if defined(_DEBUG)
        // statements
    #endif

Question 6 - 
    {...}

    for (int x = 0; x < num_rows; x++) 
        delete[] a[x]; // deallocating every row
    delete[] a; // deallocating pointer to all the rows
    
    {...}

Question 7 - 
    char * student_names[] = { "Homer", "Marg" };